import numpy as np
import networkx as nx
from collections import defaultdict
import random


def find_communities(G, T, r):
    """
    Speaker-Listener Label Propagation Algorithm (SLPA)
    see http://arxiv.org/abs/1109.5720
    """
    # Stage 1: Initialization
    kshell = {42: 8, 36: 9, 59: 9, 63: 9, 97: 9, 58: 10, 112: 10, 57: 11, 75: 12, 44: 13, 66: 13, 86: 13, 92: 13, 48: 14, 76: 14, 91: 14, 20: 15, 56: 15, 96: 15, 113: 15, 17: 16, 27: 16, 28: 16, 62: 16, 65: 16, 70: 16, 87: 16, 95: 16, 11: 17, 12: 17, 24: 17, 26: 17, 43: 17, 50: 17, 69: 17, 90: 17, 14: 18, 18: 18, 34: 18, 38: 18, 61: 18, 85: 18, 19: 19, 31: 19, 35: 19, 54: 19, 71: 19, 80: 19, 99: 19, 29: 20, 30: 20, 37: 20, 55: 20, 79: 20, 93: 20, 94: 20, 101: 20, 105: 20, 0: 21, 1: 21, 4: 21, 16: 21, 25: 21, 33: 21, 45: 21, 82: 21, 89: 21, 103: 21, 109: 21, 5: 22, 9: 22, 23: 22, 39: 22, 41: 22, 104: 22, 106: 22, 3: 23, 6: 23, 8: 23, 10: 23, 13: 23, 15: 23, 32: 23, 52: 23, 60: 23, 64: 23, 78: 23, 81: 23, 98: 23, 100: 23, 107: 23, 108: 23, 2: 24, 7: 24, 21: 24, 22: 24, 40: 24, 47: 24, 51: 24, 53: 24, 68: 24, 72: 24, 74: 24, 77: 24, 84: 24, 88: 24, 102: 24, 110: 24, 111: 24, 114: 24, 46: 25, 49: 25, 67: 25, 73: 25, 83: 25}
    memory = {i: {i: 1} for i in G.nodes()}
    node_importance = {1: 15, 146: 15, 2: 15, 3: 15, 4: 15, 79: 15, 5: 15, 6: 15, 7: 15, 8: 15, 9: 15, 10: 15, 11: 15, 12: 15, 13: 15, 25: 15, 14: 15, 50: 15, 15: 15, 16: 15, 17: 15, 18: 15, 19: 15, 20: 15, 63: 15, 21: 15, 22: 15, 23: 15, 24: 15, 26: 15, 27: 15, 54: 15, 28: 15, 91: 15, 29: 15, 35: 15, 30: 15, 82: 15, 31: 15, 144: 15, 32: 15, 137: 15, 33: 15, 34: 15, 100: 15, 107: 15, 36: 15, 37: 15, 38: 15, 39: 15, 40: 15, 94: 15, 41: 15, 42: 15, 43: 15, 44: 15, 69: 15, 45: 15, 46: 15, 47: 15, 48: 15, 49: 15, 51: 15, 52: 15, 53: 15, 72: 15, 95: 15, 55: 15, 56: 15, 57: 15, 58: 15, 59: 15, 60: 15, 61: 15, 62: 15, 64: 15, 65: 15, 98: 15, 66: 15, 67: 15, 68: 15, 70: 15, 71: 15, 73: 15, 74: 15, 75: 15, 76: 15, 77: 15, 78: 15, 80: 15, 81: 15, 101: 15, 83: 15, 84: 15, 85: 15, 111: 15, 86: 15, 87: 15, 88: 15, 131: 15, 89: 15, 90: 15, 127: 15, 92: 15, 93: 15, 96: 15, 97: 15, 99: 15, 102: 15, 103: 15, 104: 15, 105: 15, 106: 15, 108: 15, 109: 15, 110: 15, 112: 15, 113: 15, 132: 15, 114: 15, 115: 15, 116: 15, 117: 15, 118: 15, 119: 15, 120: 15, 121: 15, 122: 15, 123: 15, 124: 15, 130: 15, 125: 15, 126: 15, 128: 15, 129: 15, 133: 15, 134: 15, 135: 15, 136: 15, 138: 15, 139: 15, 140: 15, 141: 15, 142: 15, 143: 15, 145: 15, 147: 15, 148: 15, 260: 17, 152: 17, 173: 17, 162: 17, 245: 17, 225: 17, 212: 17, 426: 19, 217: 17, 273: 18, 192: 17, 239: 17, 338: 18, 352: 18, 186: 17, 341: 18, 150: 17, 246: 17, 229: 17, 248: 17, 166: 17, 190: 17, 258: 17, 151: 17, 223: 17, 185: 17, 249: 17, 323: 18, 221: 17, 233: 17, 243: 17, 211: 17, 255: 17, 181: 17, 261: 17, 256: 17, 206: 17, 203: 17, 179: 17, 198: 17, 209: 17, 180: 17, 224: 17, 348: 19, 360: 19, 369: 19, 178: 18, 207: 18, 200: 18, 156: 18, 169: 18, 172: 18, 250: 18, 187: 18, 263: 18, 216: 18, 306: 20, 304: 20, 171: 19, 193: 19, 366: 20, 358: 20, 188: 19, 208: 19, 379: 22, 395: 22, 343: 18, 387: 19, 427: 19, 285: 18, 380: 19, 565: 22, 375: 19, 274: 18, 333: 18, 337: 18, 382: 19, 340: 18, 416: 19, 271: 18, 319: 18, 282: 18, 308: 18, 330: 18, 275: 18, 268: 18, 391: 19, 293: 18, 446: 20, 349: 18, 283: 18, 320: 18, 321: 18, 286: 18, 289: 18, 398: 19, 294: 18, 295: 18, 328: 18, 421: 19, 339: 18, 149: 17, 153: 17, 154: 17, 155: 17, 157: 17, 418: 19, 158: 17, 159: 17, 232: 17, 160: 17, 365: 18, 161: 17, 163: 17, 201: 17, 164: 17, 165: 17, 167: 17, 168: 17, 170: 17, 266: 17, 174: 17, 175: 17, 235: 17, 176: 17, 177: 17, 182: 17, 183: 17, 184: 17, 244: 17, 189: 17, 191: 17, 355: 18, 194: 17, 195: 17, 196: 17, 197: 17, 199: 17, 227: 17, 202: 17, 204: 17, 205: 17, 242: 17, 210: 17, 356: 18, 213: 17, 214: 17, 215: 17, 345: 18, 218: 17, 219: 17, 220: 17, 222: 17, 332: 18, 226: 17, 228: 17, 230: 17, 231: 17, 234: 17, 236: 17, 237: 17, 238: 17, 240: 17, 241: 17, 335: 18, 247: 17, 331: 18, 251: 17, 252: 17, 253: 17, 254: 17, 257: 17, 259: 17, 262: 17, 264: 17, 265: 17, 267: 17, 316: 18, 301: 18, 354: 18, 437: 21, 485: 21, 478: 21, 371: 20, 449: 21, 410: 20, 500: 22, 473: 21, 433: 20, 422: 20, 404: 20, 396: 20, 519: 22, 435: 21, 385: 20, 496: 21, 425: 20, 278: 19, 413: 20, 357: 19, 347: 19, 503: 22, 405: 20, 378: 20, 367: 19, 415: 20, 488: 21, 288: 19, 406: 20, 359: 19, 428: 20, 300: 19, 346: 19, 291: 19, 298: 19, 317: 19, 361: 19, 277: 19, 362: 19, 281: 19, 314: 19, 287: 19, 312: 19, 315: 19, 327: 19, 351: 19, 502: 23, 727: 29, 397: 21, 469: 22, 420: 21, 472: 22, 408: 21, 514: 23, 462: 22, 461: 22, 571: 24, 522: 23, 432: 21, 480: 22, 322: 20, 326: 20, 493: 22, 710: 29, 589: 25, 401: 22, 272: 21, 279: 21, 336: 21, 693: 30, 597: 27, 296: 22, 459: 25, 363: 23, 388: 25, 558: 23, 537: 22, 450: 21, 560: 23, 490: 21, 504: 22, 505: 22, 595: 24, 501: 22, 423: 20, 512: 22, 645: 25, 508: 22, 651: 25, 393: 20, 535: 22, 495: 21, 594: 24, 455: 21, 545: 23, 532: 22, 466: 21, 544: 23, 465: 21, 372: 20, 451: 21, 506: 22, 521: 22, 448: 21, 476: 21, 577: 23, 484: 21, 436: 21, 570: 23, 389: 20, 452: 21, 579: 23, 370: 20, 563: 23, 524: 22, 520: 22, 430: 20, 443: 21, 574: 23, 527: 22, 458: 21, 444: 21, 538: 22, 399: 20, 438: 21, 403: 20, 412: 20, 497: 21, 383: 20, 394: 20, 269: 19, 270: 19, 276: 19, 280: 19, 284: 19, 468: 21, 290: 19, 292: 19, 297: 19, 299: 19, 302: 19, 381: 20, 303: 19, 305: 19, 307: 19, 309: 19, 310: 19, 311: 19, 453: 21, 313: 19, 447: 21, 318: 19, 324: 19, 325: 19, 329: 19, 482: 21, 334: 19, 402: 20, 342: 19, 390: 20, 344: 19, 414: 20, 350: 19, 353: 19, 424: 20, 364: 19, 368: 19, 475: 21, 417: 20, 431: 20, 525: 23, 489: 22, 653: 26, 857: 37, 494: 22, 454: 22, 470: 22, 540: 23, 740: 30, 564: 24, 576: 24, 708: 28, 550: 24, 610: 25, 657: 26, 479: 22, 442: 22, 669: 27, 523: 23, 492: 22, 483: 22, 654: 26, 559: 24, 569: 24, 543: 24, 491: 22, 547: 24, 439: 22, 650: 26, 511: 23, 575: 24, 411: 21, 526: 23, 627: 25, 445: 22, 434: 22, 441: 22, 460: 22, 691: 28, 487: 22, 518: 23, 471: 22, 373: 21, 377: 21, 386: 21, 392: 21, 440: 22, 707: 29, 906: 43, 599: 26, 793: 33, 821: 35, 628: 26, 712: 30, 726: 30, 698: 29, 637: 27, 590: 26, 625: 26, 605: 26, 517: 24, 668: 28, 663: 28, 588: 25, 499: 23, 592: 26, 498: 23, 676: 28, 533: 24, 463: 23, 551: 25, 536: 24, 567: 25, 587: 25, 376: 22, 409: 22, 474: 23, 746: 32, 723: 31, 598: 27, 722: 31, 867: 39, 584: 26, 683: 29, 611: 27, 704: 30, 618: 27, 670: 29, 534: 25, 800: 35, 846: 38, 539: 25, 548: 26, 553: 26, 556: 26, 601: 27, 531: 25, 407: 23, 419: 23, 516: 25, 486: 24, 791: 35, 561: 27, 796: 35, 632: 29, 591: 28, 614: 28, 630: 28, 684: 30, 655: 29, 701: 31, 606: 28, 481: 25, 530: 26, 604: 28, 467: 25, 582: 27, 609: 28, 528: 26, 580: 28, 715: 33, 719: 33, 675: 31, 665: 31, 400: 25, 429: 25, 801: 38, 739: 35, 566: 29, 374: 26, 608: 31, 673: 33, 602: 32, 542: 30, 585: 32, 667: 36, 617: 34, 763: 30, 639: 26, 785: 32, 819: 33, 807: 33, 738: 30, 658: 27, 677: 27, 837: 35, 876: 38, 616: 25, 554: 24, 456: 22, 642: 26, 724: 29, 773: 31, 652: 26, 752: 30, 662: 27, 802: 33, 541: 23, 529: 23, 593: 25, 631: 25, 783: 32, 568: 24, 648: 26, 643: 26, 507: 23, 509: 23, 464: 22, 596: 25, 612: 25, 581: 24, 477: 22, 615: 25, 578: 24, 515: 23, 552: 24, 635: 26, 647: 26, 384: 21, 703: 29, 831: 35, 921: 44, 861: 38, 877: 39, 839: 36, 885: 41, 956: 51, 624: 26, 666: 28, 758: 31, 640: 27, 742: 31, 762: 31, 626: 26, 808: 34, 825: 35, 777: 32, 855: 37, 943: 48, 795: 33, 872: 39, 736: 30, 799: 34, 607: 26, 784: 33, 573: 25, 816: 34, 826: 35, 696: 29, 749: 31, 685: 28, 629: 26, 711: 29, 731: 30, 735: 30, 603: 26, 760: 31, 678: 28, 546: 25, 687: 28, 695: 29, 621: 26, 656: 27, 586: 25, 689: 29, 557: 25, 686: 28, 829: 36, 900: 43, 848: 38, 875: 40, 862: 39, 915: 45, 951: 50, 732: 31, 935: 47, 613: 27, 700: 30, 963: 53, 870: 40, 899: 43, 744: 32, 761: 32, 881: 41, 964: 53, 729: 31, 660: 29, 778: 33, 840: 37, 748: 32, 805: 35, 759: 32, 902: 43, 803: 35, 804: 35, 958: 52, 768: 33, 721: 31, 941: 49, 771: 33, 809: 35, 741: 32, 755: 32, 510: 25, 792: 34, 622: 27, 674: 29, 794: 34, 649: 28, 549: 26, 718: 31, 555: 26, 619: 27, 513: 25, 636: 28, 638: 28, 814: 35, 600: 27, 706: 30, 671: 29, 457: 24, 894: 44, 869: 41, 966: 55, 992: 61, 917: 46, 889: 43, 938: 49, 810: 36, 847: 39, 959: 53, 709: 31, 833: 38, 827: 37, 878: 41, 790: 35, 823: 37, 880: 42, 779: 35, 694: 31, 688: 31, 812: 36, 766: 34, 806: 36, 754: 33, 787: 35, 730: 32, 659: 30, 987: 60, 672: 30, 690: 31, 633: 29, 764: 34, 781: 35, 928: 47, 813: 36, 850: 39, 716: 32, 702: 31, 775: 34, 661: 30, 620: 28, 644: 29, 681: 30, 641: 29, 725: 32, 664: 30, 572: 27, 562: 27, 940: 51, 1000: 64, 912: 47, 745: 34, 888: 44, 918: 47, 817: 37, 903: 45, 914: 47, 834: 39, 866: 41, 863: 41, 884: 44, 851: 40, 887: 44, 892: 44, 895: 45, 860: 41, 909: 46, 756: 34, 931: 49, 743: 34, 897: 45, 986: 61, 765: 35, 849: 40, 890: 44, 907: 46, 926: 48, 945: 51, 936: 49, 774: 35, 916: 47, 873: 42, 828: 38, 960: 54, 961: 54, 946: 51, 882: 43, 933: 49, 901: 45, 714: 33, 769: 35, 679: 31, 845: 40, 852: 40, 623: 29, 728: 33, 944: 51, 646: 30, 692: 32, 975: 59, 868: 42, 962: 56, 920: 48, 998: 65, 989: 62, 924: 49, 954: 54, 972: 57, 842: 40, 854: 41, 699: 33, 789: 37, 820: 39, 955: 54, 953: 54, 856: 42, 824: 39, 925: 49, 967: 57, 929: 49, 991: 63, 836: 40, 835: 40, 939: 51, 874: 43, 898: 46, 908: 47, 913: 48, 990: 63, 864: 42, 697: 33, 733: 34, 919: 48, 948: 52, 971: 57, 886: 45, 750: 35, 927: 49, 932: 50, 832: 39, 818: 38, 770: 36, 841: 40, 858: 42, 682: 32, 737: 34, 893: 45, 934: 50, 811: 38, 859: 42, 911: 48, 830: 39, 583: 29, 717: 34, 713: 34, 634: 31, 815: 38, 720: 34, 753: 35, 680: 32, 747: 35, 705: 34, 923: 50, 973: 58, 985: 62, 937: 52, 970: 58, 904: 47, 922: 50, 767: 37, 844: 42, 995: 65, 853: 42, 976: 60, 993: 64, 942: 53, 974: 60, 981: 62, 994: 65, 949: 54, 999: 66, 996: 66, 977: 60, 957: 56, 734: 35, 969: 58, 871: 44, 896: 47, 797: 38, 988: 63, 865: 43, 910: 48, 979: 61, 952: 54, 905: 48, 950: 54, 786: 38, 788: 38, 822: 40, 843: 42, 883: 46, 751: 36, 780: 38, 930: 50, 879: 45, 891: 47, 776: 38, 982: 63, 983: 63, 965: 58, 997: 67, 968: 59, 978: 62, 984: 63, 772: 38, 947: 54, 798: 39, 980: 62, 782: 39, 838: 42, 757: 37}

    # Stage 2: Evolution
    # 开始遍历T次所有节点
    order = sorted(node_importance.items(), key=lambda x: x[1], reverse=True)
    for t in range(T):
        # 按节点重要性降序排列
        listenersOrder = [n[0] for n in order]
        listenersOrder = [n for n in range(1, 1001)]
        # print(listenersOrder)

        # 开始遍历节点
        for listener in listenersOrder:
            # 每个节点的key就是与他相连的节点标签名
            # print(listener)
            speakers = G[listener].keys()  # listener的邻居节点
            # print(speakers)
            if len(speakers) == 0:
                continue
            # 存放每个邻居节点出现次数最多的标签
            labels = defaultdict(int)  # key不存在时，返回的是工厂函数的默认值，比如list对应[ ]，str对应的是空字符串，set对应set( )，int对应0
            # 遍历所有与其相关联的节点
            for j, speaker in enumerate(speakers):
                # Speaker Rule
                total = float(sum(memory[speaker].values()))  # 计算speaker节点记忆标签总数

                # 论文中应该是随机选取一个，因为标签出现次数越多，相应地被选中的概率也就越大
                # 查看speaker中memory中出现概率最大的标签并记录，存在加1，不存在赋值1，key是标签名，value是Listener与speaker之间的权
                labels[list(memory[speaker].keys())[
                    np.random.multinomial(1, [freq / total for freq in memory[speaker].values()]).argmax()]] += 1
                # print(labels)

            # Listener Rule
            # 查看labels中值最大的标签，让其成为当前listener的一个记录；若有多个，则选择标签影响力最大的一个
            candidateLabel = sorted(labels.items(), key=lambda x: x[1], reverse=True)
            freq_max_labels = [(k, v) for k, v in candidateLabel if v == candidateLabel[0][1]]
            # print('候选标签：')
            # print(freq_max_labels)
            for candidate in freq_max_labels:
                node_importance[candidate[0]]
            acceptedLabel = max(freq_max_labels, key=lambda x: node_importance[x[0]])[0]
            # print(acceptedLabel)

            # Update listener memory
            if acceptedLabel in memory[listener]:
                memory[listener][acceptedLabel] += 1
            else:
                memory[listener][acceptedLabel] = 1

    # Stage 3:
    node_label = {}
    for node, mem in memory.items():
        print(node, mem)
        max_count = max(mem.items(), key=lambda x: x[1])[1]
        max_label_list = [label for label, count in mem.items() if count == max_count]
        node_label[node] = random.choice(max_label_list)
    return node_label


if __name__ == '__main__':
    # G = nx.read_gml(r'dataset\polbooks.gml', label='id')
    G = nx.Graph()
    with open(r'dataset\lfr_0.4', 'r') as f:
        for line in f:
            G.add_edge(int(line.strip().split('\t')[0]), int(line.strip().split('\t')[1]))
    result = find_communities(G, 20, 0.4)
    print(result)
    community = {}
    for k, v in result.items():
        if v in community.keys():
            community[v].append(k)
        else:
            community.setdefault(v, [k])
    print(community)
    print(len(community.keys()))
