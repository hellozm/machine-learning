import networkx as nx
import numpy as np


def generate_lfr_graph():
    G = nx.Graph()
    with open(r'lfr_0.4', 'r') as f:
        for line in f:
            G.add_edge(int(line.strip().split('\t')[0]), int(line.strip().split('\t')[1]))
    return G


if __name__ == '__main__':
    G = generate_lfr_graph()
    nodelist = [i+1 for i in range(1000)]
    B = nx.modularity_matrix(G, nodelist=nodelist)  # G的模块度矩阵
    print(G.nodes)  # 节点必须按照升序，否则生成的模块度矩阵是按G的节点顺序

    node_cummunity = {}
    # 处理后的标准数据集
    result = {993: [0, 259, 436, 704, 922, 78, 17, 216, 584, 833, 992, 339, 165, 987, 61, 641, 864, 978, 749, 904, 785, 842, 113, 576, 519, 748, 192, 169, 457, 628, 710, 619, 717, 716, 235, 316, 275, 289, 444, 616, 296, 380, 481, 385], 978: [145, 890, 775, 14, 852, 967, 977, 983, 771, 733, 946, 257, 248, 76, 531, 100, 882, 781, 101, 840, 384, 134, 837, 779, 212, 476, 618, 283, 324, 341, 383], 996: [347, 828, 7, 744, 887, 917, 936, 841, 379, 853, 941, 504, 666, 28, 34, 332, 823, 995, 370, 956, 45, 728, 789, 711, 65, 747, 220, 70, 292, 765, 805, 543, 831, 540, 420, 892, 135, 139, 338, 669, 521, 542, 201, 734, 829, 541, 620, 492, 586, 376, 485], 975: [1, 342, 702, 893, 974, 8, 211, 652, 816, 20, 721, 809, 846, 954, 952, 22, 30, 560, 859, 764, 56, 455, 925, 613, 454, 689, 606, 491, 529, 678, 168, 170, 377, 573, 215, 462, 344, 555, 291, 350, 691, 416, 688, 670], 998: [762, 386, 997, 953, 818, 35, 185, 908, 415, 55, 318, 918, 947, 658, 98, 260, 505, 827, 109, 478, 632, 114, 960, 763, 591, 424, 155, 523, 558, 157, 497, 171, 844, 357, 188, 673, 246, 271, 446, 389, 423, 530, 571], 987: [899, 484, 143, 340, 419, 854, 72, 242, 617, 915, 651, 87, 130, 624, 661, 986, 92, 471, 700, 395, 108, 407, 783, 116, 434, 940, 123, 129, 668, 587, 808, 513, 146, 223, 480, 927, 147, 404, 187, 226, 552, 664, 334, 323, 352, 430], 992: [2, 868, 874, 939, 965, 524, 991, 27, 90, 676, 31, 136, 990, 42, 75, 723, 772, 683, 126, 549, 104, 179, 815, 154, 277, 533, 167, 429, 176, 506, 431, 793, 677, 581, 286, 295, 458, 343, 367, 373], 989: [745, 151, 6, 161, 706, 911, 988, 838, 597, 709, 351, 41, 149, 359, 985, 879, 281, 636, 102, 767, 120, 770, 932, 197, 208, 137, 713, 695, 177, 849, 199, 417, 568, 173, 365, 791, 603, 398, 218, 219, 358, 437, 596, 680, 452, 401, 517, 705], 938: [847, 861, 579, 18, 888, 937, 639, 615, 43, 877, 590, 66, 267, 77, 111, 163, 754, 694, 304, 314, 418, 428], 924: [867, 923, 16, 612, 698, 865, 19, 62, 374, 489, 819, 835, 583, 46, 553, 873, 897, 50, 778, 848, 870, 270, 58, 222, 593, 319, 96, 180, 817, 857, 118, 701, 509, 538, 193, 712, 361, 645, 375, 679], 915: [3, 722, 830, 914, 920, 657, 795, 322, 67, 629, 390, 80, 871, 110, 95, 119, 178, 203, 595, 258, 269, 328], 962: [4, 172, 800, 860, 950, 961, 594, 869, 472, 494, 607, 79, 589, 901, 368, 718, 249, 526, 207, 355, 547, 213, 601, 759, 268, 686, 278, 565, 302, 311, 353, 486, 408], 1000: [5, 731, 919, 984, 999, 244, 426, 49, 23, 883, 708, 625, 38, 650, 811, 83, 926, 103, 294, 144, 158, 162, 200, 356, 183, 621, 851, 186, 727, 510, 252, 574, 349], 983: [488, 10, 903, 921, 981, 982, 564, 726, 788, 477, 755, 48, 659, 863, 968, 51, 696, 693, 60, 796, 85, 787, 394, 255, 105, 127, 750, 369, 570, 582, 229, 360, 382, 640, 309, 456, 756], 976: [972, 969, 449, 737, 15, 493, 902, 913, 975, 757, 928, 938, 329, 184, 544, 88, 604, 450, 769, 202, 483, 117, 681, 881, 293, 578, 715, 858, 166, 265, 175, 466, 774, 204, 312, 433, 362, 363, 473], 935: [934, 9, 536, 856, 905, 44, 228, 448, 739, 397, 518, 495, 141, 174, 234, 366, 402, 411, 239, 251, 479, 690], 944: [224, 738, 272, 238, 894, 832, 468, 52, 189, 534, 889, 906, 348, 720, 672, 630, 138, 933, 140, 303, 782, 148, 812, 674, 287, 660, 943, 290, 253, 554, 300, 321], 956: [284, 13, 790, 806, 884, 955, 898, 539, 714, 274, 825, 675, 243, 443, 194, 487, 198, 227, 438, 566, 315, 634, 317, 459, 600, 406], 959: [557, 453, 958, 665, 836, 37, 807, 824, 880, 963, 409, 499, 94, 725, 86, 735, 751, 89, 654, 707, 803, 305, 516, 327, 388, 206, 153, 567, 647, 231, 364, 164, 502, 195, 730, 405, 250, 325, 440, 813, 333, 556], 997: [638, 11, 766, 843, 964, 994, 996, 895, 909, 465, 575, 82, 797, 949, 979, 91, 254, 320, 821, 205, 588, 605, 498, 810, 346, 684, 414, 508, 490, 648, 427, 545, 261, 514, 643, 719, 372, 663, 399, 752, 561], 967: [971, 29, 81, 337, 924, 966, 741, 336, 469, 381, 743, 68, 935, 232, 773, 210, 885, 753, 786, 802, 84, 872, 112, 131, 115, 945, 569, 592, 442, 182, 196, 463, 537, 602, 209, 580, 535, 577, 276, 263, 637, 585], 917: [12, 559, 784, 876, 916, 64, 839, 73, 432, 74, 794, 804, 159, 181, 217, 299, 279, 410, 525, 298], 994: [24, 501, 422, 973, 980, 993, 511, 761, 760, 59, 944, 970, 441, 128, 522, 528, 736, 152, 156, 768, 910, 532, 190, 622, 611, 214, 548, 550, 221, 240, 878, 256, 512, 633, 310, 724, 474, 655, 439], 990: [623, 425, 692, 25, 191, 850, 886, 891, 39, 93, 742, 826, 896, 47, 907, 912, 989, 54, 687, 150, 57, 307, 63, 758, 671, 371, 435, 142, 461, 482, 160, 262, 354, 608, 335, 746], 960: [862, 378, 500, 930, 627, 822, 703, 697, 421, 403, 959, 121, 780, 900, 653, 331, 225, 230, 297, 649, 236, 308, 387, 470, 599, 685], 963: [21, 273, 503, 598, 962, 32, 396, 644, 792, 33, 99, 106, 820, 282, 609, 667, 285, 133, 451, 799, 845, 460, 546, 233, 400, 313, 626, 467, 306], 999: [699, 26, 53, 855, 948, 998, 36, 507, 976, 40, 682, 834, 392, 732, 631, 951, 729, 931, 464, 520, 288, 447, 475, 740, 412, 642, 237, 929, 264, 635, 266, 393, 551, 646, 814, 301, 413, 527, 515], 958: [866, 875, 776, 245, 247, 71, 777, 97, 69, 610, 942, 445, 563, 798, 957, 107, 656, 662, 801, 122, 124, 572, 125, 132, 562, 241, 345, 496, 330, 614, 280, 326, 391]}

    for key, values in result.items():
        for node in values:
            node_cummunity[node] = key
    print(node_cummunity)

    for i in range(1000):
        for j in range(1000):
            if node_cummunity[i] != node_cummunity[j]:  # 节点i和节点j不属于同一社团
                B[i, j] = 0
    print(len(G.edges()))
    print(np.sum(B) / (2*len(G.edges())))
